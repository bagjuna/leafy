name: Deploy to EC2

# 기존 CI 워크플로우가 08-cicd 브랜치에서 성공적으로 끝나면 실행
on:
  workflow_run:
    workflows: ["Backend Build and Push", "Frontend Build and Push"]
    types:
      - completed
    branches:
      - '08-cicd'

jobs:
  deploy:
    # 워크플로우가 성공했을 때만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # 1. EC2 서버에 docker-compose.yml 파일 전송 (기존 파일 덮어쓰기)
            # Secrets를 통해 변수 값을 받아와서 docker-compose.yml을 서버에 생성
            cat << EOF > docker-compose.yml
            version: '3'
            services:
              leafy-postgres:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/leafy-postgres:latest # Postgres는 최신 버전을 고정적으로 사용
                volumes:
                  - leafy_data:/var/lib/postgresql/data
                restart: always

              leafy-backend:
                # 방금 빌드한 새로운 이미지로 교체!
                image: ${{ secrets.DOCKERHUB_USERNAME }}/leafy-backend:${{ github.event.workflow_run.head_sha }}
                environment:
                  - DB_URL=leafy-postgres
                depends_on:
                  - leafy-postgres
                restart: on-failure
            
              leafy-front:
                # 방금 빌드한 새로운 이미지로 교체!
                image: ${{ secrets.DOCKERHUB_USERNAME }}/leafy-frontend:${{ github.event.workflow_run.head_sha }}
                environment:
                  - BACKEND_HOST=leafy-backend
                ports:
                  - 80:80
                depends_on:
                  - leafy-backend
                restart: on-failure

            volumes:
              leafy_data:
            EOF
            
            # 2. Docker Hub 로그인 (private 이미지 다운로드를 위해)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # 3. Docker Compose로 애플리케이션 실행
            # --pull 옵션으로 항상 최신 이미지를 받도록 강제
            # -d 옵션으로 백그라운드에서 실행
            docker-compose --file docker-compose.yml pull
            docker-compose --file docker-compose.yml up -d
            
            # 4. 불필요한 Docker 이미지 정리 (서버 용량 확보)
            docker image prune -af
